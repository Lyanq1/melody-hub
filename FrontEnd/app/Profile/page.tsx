'use client'

import { useEffect, useRef, useState } from 'react'
import { useRouter } from 'next/navigation'
import axios from 'axios'
import { toast } from 'sonner'
import { Camera } from 'lucide-react'
import { useAuth } from '@/hooks/use-auth'
import { useSession } from 'next-auth/react'

import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Skeleton } from '@/components/ui/skeleton'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Button } from '@/components/ui/button'
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'

export default function Profile() {
  const router = useRouter()
  const { user, isAuthenticated, logout } = useAuth()
  const { data: session } = useSession()
  const fileInputRef = useRef<HTMLInputElement>(null)
  const [loading, setLoading] = useState(true)
  const [imageProcessing, setImageProcessing] = useState(false)
  const [username, setUsername] = useState('')

  const [displayedName, setDisplayedName] = useState('')
  const [fullName, setFullName] = useState('')
  const [email, setEmail] = useState('')
  const [phone, setPhone] = useState('')
  const [address, setAddress] = useState('')
  const [avatarUrl, setAvatarUrl] = useState('')

  useEffect(() => {
    // if (!isAuthenticated) {
    //   router.push('/login');
    //   return;
    // }

    if (user) {
      console.log('üë§ Profile page user data:', user)
      console.log('üñºÔ∏è Avatar URL from user:', user.avatarURL)

      setUsername(user.username || user.email?.split('@')[0] || '')
      setFullName(user.displayName || '')
      setDisplayedName(user.displayName || 'Ch∆∞a c√≥ t√™n')
      setEmail(user.email || '')
      setPhone(user.phone || '')
      setAddress(user.address || '')
      // ∆Øu ti√™n avatar t·ª´ Google Auth ho·∫∑c backend
      setAvatarUrl(user.avatarURL || '')
      setLoading(false)
    }
  }, [isAuthenticated, user, router])

  const handleLogout = async () => {
    await logout()
    router.push('/')
  }

  // L·∫•y authorization header t√πy thu·ªôc v√†o lo·∫°i authentication
  const getAuthHeaders = () => {
    const token = localStorage.getItem('token')

    if (token) {
      // Traditional JWT authentication
      return {
        Authorization: `Bearer ${token}`
      }
    } else if (session?.user) {
      // Google Auth - s·ª≠ d·ª•ng accountID ho·∫∑c email l√†m identifier
      const sessionUser = session.user as any
      return {
        'X-Session-User': JSON.stringify({
          accountID: sessionUser.accountID,
          email: sessionUser.email,
          username: sessionUser.username
        })
      }
    }

    return {}
  }

  const handleSave = async () => {
    try {
      // Ki·ªÉm tra n·∫øu user c√≥ accountID (t·ª´ backend) th√¨ d√πng endpoint c·∫≠p nh·∫≠t
      if (user?.accountID) {
        const headers = getAuthHeaders()
        console.log('üîë Sending request with headers:', headers)

        // S·ª≠ d·ª•ng username ho·∫∑c email l√†m identifier
        const userIdentifier = username || user.email?.split('@')[0] || user.email

        await axios.put(
          `http://localhost:5000/api/auth/user/${userIdentifier}`,
          {
            DisplayName: fullName,
            Email: email,
            Address: address,
            Phone: phone,
            AvatarURL: avatarUrl
          },
          { headers }
        )
      } else {
        // N·∫øu kh√¥ng c√≥ accountID, c√≥ th·ªÉ l√† Google user ch∆∞a ƒë∆∞·ª£c sync
        toast.warning('Th√¥ng tin user ch∆∞a ƒë∆∞·ª£c ƒë·ªìng b·ªô ho√†n to√†n. Vui l√≤ng th·ª≠ l·∫°i sau khi ƒëƒÉng nh·∫≠p l·∫°i.')
        return
      }

      // C·∫≠p nh·∫≠t useAuth state ƒë·ªÉ refresh navbar
      if (user) {
        // C·∫≠p nh·∫≠t user object trong useAuth
        const updatedUser = {
          ...user,
          displayName: fullName,
          email: email,
          phone: phone,
          address: address,
          avatarURL: avatarUrl
        }

        // Trigger refresh user info in useAuth hook
        if (typeof window !== 'undefined') {
          // Dispatch custom event v·ªõi updated user data
          window.dispatchEvent(
            new CustomEvent('user-profile-updated', {
              detail: updatedUser
            })
          )

          // Dispatch event for navbar avatar update
          window.dispatchEvent(new Event('avatar-update'))
        }
      }

      toast.success('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!')
      setDisplayedName(fullName)
    } catch (err) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin:', err)
      toast.error('ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t.')
    }
  }
  const getCookie = (name: string): string | null => {
    const value = `; ${document.cookie}`
    const parts = value.split(`; ${name}=`)
    if (parts.length === 2) return parts.pop()?.split(';').shift() || null
    return null
  }
  // T·ªëi ∆∞u h√≥a ·∫£nh tr∆∞·ªõc khi convert base64
  const compressImage = (file: File, quality: number = 0.7): Promise<string> => {
    return new Promise((resolve) => {
      const canvas = document.createElement('canvas')
      const ctx = canvas.getContext('2d')
      const img = new Image()

      img.onload = () => {
        // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc t·ªëi ƒëa
        const maxWidth = 400
        const maxHeight = 400

        let { width, height } = img

        // T√≠nh to√°n k√≠ch th∆∞·ªõc m·ªõi gi·ªØ t·ª∑ l·ªá
        if (width > height) {
          if (width > maxWidth) {
            height = (height * maxWidth) / width
            width = maxWidth
          }
        } else {
          if (height > maxHeight) {
            width = (width * maxHeight) / height
            height = maxHeight
          }
        }

        canvas.width = width
        canvas.height = height

        // V·∫Ω ·∫£nh v·ªõi k√≠ch th∆∞·ªõc m·ªõi
        ctx?.drawImage(img, 0, 0, width, height)

        // Convert to base64 v·ªõi quality th·∫•p h∆°n
        const compressedBase64 = canvas.toDataURL('image/jpeg', quality)
        resolve(compressedBase64)
      }

      img.src = URL.createObjectURL(file)
    })
  }

  // When file is selected for avatar
  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      console.log('üìÅ Original file size:', (file.size / 1024).toFixed(2), 'KB')

      // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
      if (!file.type.startsWith('image/')) {
        toast.error('Vui l√≤ng ch·ªçn file ·∫£nh h·ª£p l·ªá')
        return
      }

      setImageProcessing(true)
      toast.info('ƒêang x·ª≠ l√Ω ·∫£nh...')

      try {
        // T·ªëi ∆∞u h√≥a ·∫£nh
        const compressedBase64 = await compressImage(file, 0.7)

        // Ki·ªÉm tra k√≠ch th∆∞·ªõc sau khi n√©n
        const sizeInKB = (compressedBase64.length * 0.75) / 1024 // ∆∞·ªõc t√≠nh k√≠ch th∆∞·ªõc base64
        console.log('üì¶ Compressed size:', sizeInKB.toFixed(2), 'KB')

        if (sizeInKB > 100) {
          // N√©n th√™m n·∫øu v·∫´n c√≤n l·ªõn
          const moreCompressed = await compressImage(file, 0.5)
          const newSize = (moreCompressed.length * 0.75) / 1024
          console.log('üì¶ More compressed size:', newSize.toFixed(2), 'KB')

          if (newSize > 100) {
            toast.warning('·∫¢nh v·∫´n c√≤n l·ªõn. Vui l√≤ng ch·ªçn ·∫£nh nh·ªè h∆°n ho·∫∑c ch·∫•t l∆∞·ª£ng th·∫•p h∆°n.')
            return
          }
          setAvatarUrl(moreCompressed)
        } else {
          setAvatarUrl(compressedBase64)
        }

        toast.success('·∫¢nh ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!')
      } catch (error) {
        console.error('L·ªói khi t·ªëi ∆∞u ·∫£nh:', error)
        toast.error('L·ªói khi x·ª≠ l√Ω ·∫£nh')
      } finally {
        setImageProcessing(false)
      }
    }
  }

  return (
    <div className='flex flex-col md:flex-row max-w-6xl mx-auto px-4 py-10 gap-10'>
      {/* Sidebar */}
      <aside className='space-y-4 text-sm font-medium w-64'>
        <div className='border-b pb-2'>
          <p className='text-black font-semibold uppercase text-lg tracking-wide hover:text-blue-600 cursor-pointer'>
            Th√¥ng tin t√†i kho·∫£n
          </p>
        </div>

        <div className='border-b pb-2 cursor-pointer hover:text-blue-600'>
          <p className='text-black font-semibold uppercase text-lg tracking-wide hover:text-blue-600 cursor-pointer'>
            ƒê∆°n h√†ng ƒë√£ mua
          </p>
        </div>

        <div className='border-b pb-2 cursor-pointer hover:text-red-600'>
          <button
            onClick={handleLogout}
            className='text-black font-semibold uppercase text-lg tracking-wide hover:text-blue-600 cursor-pointer text-left'
          >
            Tho√°t
          </button>
        </div>
      </aside>

      {/* Main content */}
      <div className='w-full md:w-3/4 bg-white p-6 rounded-lg shadow space-y-7 relative'>
        {/* Avatar */}
        <input
          ref={fileInputRef}
          type='file'
          accept='image/*'
          id='avatar-upload'
          className='hidden'
          onChange={handleFileChange}
        />

        <div className='flex justify-center relative'>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <div className='relative'>
                  <Avatar className='h-40 w-40 border-2 border-gray-300'>
                    <AvatarImage src={avatarUrl || 'https://github.com/shadcn.png'} />
                    <AvatarFallback>NA</AvatarFallback>
                  </Avatar>
                  <div
                    onClick={() => !imageProcessing && fileInputRef.current?.click()}
                    className={`absolute bottom-0 right-0 bg-white rounded-full p-2 shadow-md border border-gray-200 transition-colors ${
                      imageProcessing ? 'cursor-not-allowed opacity-50' : 'cursor-pointer hover:bg-gray-50'
                    }`}
                  >
                    {imageProcessing ? (
                      <div className='animate-spin h-5 w-5 border-2 border-gray-600 border-t-transparent rounded-full' />
                    ) : (
                      <Camera className='h-5 w-5 text-gray-600' />
                    )}
                  </div>
                </div>
              </TooltipTrigger>
              <TooltipContent>
                <p>Nh·∫•p v√†o icon ƒë·ªÉ thay ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>

        {/* Display Name */}
        <div className='space-y-2'>
          <Label className='text-lg font-semibold'>T√™n hi·ªÉn th·ªã *</Label>
          {loading ? (
            <Skeleton className='h-12 w-full rounded-md' />
          ) : (
            <Input className='h-12 text-lg' value={fullName} onChange={(e) => setFullName(e.target.value)} />
          )}
        </div>

        {/* Email */}
        <div className='space-y-2'>
          <Label className='text-lg font-semibold'>Email *</Label>
          {loading ? (
            <Skeleton className='h-12 w-full rounded-md' />
          ) : (
            <Input className='h-12 text-lg' value={email} onChange={(e) => setEmail(e.target.value)} />
          )}
        </div>

        {/* Address */}
        <div className='space-y-2'>
          <Label className='text-lg font-semibold'>ƒê·ªãa ch·ªâ *</Label>
          {loading ? (
            <Skeleton className='h-12 w-full rounded-md' />
          ) : (
            <Input className='h-12 text-lg' value={address} onChange={(e) => setAddress(e.target.value)} />
          )}
        </div>

        {/* Phone */}
        <div className='space-y-2'>
          <Label className='text-lg font-semibold'>S·ªë ƒëi·ªán tho·∫°i *</Label>
          {loading ? (
            <Skeleton className='h-12 w-full rounded-md' />
          ) : (
            <Input className='h-12 text-lg' value={phone} onChange={(e) => setPhone(e.target.value)} />
          )}
        </div>

        {/* Buttons */}
        <div className='pt-4 flex justify-end'>
          <Button onClick={handleSave} className='bg-black text-white hover:bg-gray-800 font-semibold'>
            L∆∞u thay ƒë·ªïi
          </Button>
        </div>
      </div>
    </div>
  )
}
